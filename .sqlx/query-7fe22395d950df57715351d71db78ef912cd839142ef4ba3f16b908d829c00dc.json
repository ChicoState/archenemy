{
  "db_name": "PostgreSQL",
  "query": "WITH user_tags AS (\n    SELECT tag_name FROM UserTags WHERE user_id = $1\n),\nuser_likes AS (\n    SELECT target_user_id FROM UserLikes WHERE user_id = $1\n),\nuser_dislikes AS (\n    SELECT target_user_id FROM UserDislikes WHERE user_id = $1\n),\n-- Get user's tags with embeddings\nuser_tag_embeddings AS (\n    SELECT t.name, t.embedding\n    FROM Tags t\n    JOIN UserTags ut ON t.name = ut.tag_name\n    WHERE ut.user_id = $1 AND t.embedding IS NOT NULL\n),\n-- Get potential nemesis users' tags with embeddings\nnemesis_tag_embeddings AS (\n    SELECT ut.user_id, t.name, t.embedding\n    FROM Tags t\n    JOIN UserTags ut ON t.name = ut.tag_name\n    WHERE ut.user_id != $1 \n        AND ut.user_id NOT IN (SELECT target_user_id FROM user_likes)\n        AND ut.user_id NOT IN (SELECT target_user_id FROM user_dislikes)\n        AND t.embedding IS NOT NULL\n),\n-- Calculate tag embedding similarity scores for each potential nemesis\ntag_similarity_scores AS (\n    SELECT \n        nte.user_id,\n        -- For each user, calculate average similarity between their tags and opposite of user's tags\n        -- Higher score = more opposite tags (better nemesis match)\n        AVG(\n            CASE \n                WHEN ute.embedding IS NOT NULL AND nte.embedding IS NOT NULL THEN\n                    -- Invert user tag embedding for opposite comparison\n                    -- Scale to 0-1 range where 1 = perfect opposite\n                    (1 - ((ute.embedding <=> nte.embedding) / 2))\n                ELSE 0.5\n            END\n        ) AS tag_embedding_score\n    FROM \n        nemesis_tag_embeddings nte\n    CROSS JOIN \n        user_tag_embeddings ute\n    GROUP BY \n        nte.user_id\n),\n-- Calculate combined score based on embedding similarity and tag overlap\nuser_scores AS (\n    SELECT \n        u.id,\n        (\n            -- 1. User embedding similarity component (50%)\n            -- Higher score = better nemesis match (more opposite)\n            CASE\n                WHEN u.embedding IS NOT NULL THEN \n                    -- Compare with negative embedding to find semantic opposites\n                    -- Scale to 0-1 range where 1 = perfect nemesis\n                    (1 - (u.embedding <=> $4::vector) / 2)\n                ELSE 0.5 -- Default middle value if no embedding\n            END * 0.5 -- 50% weight for user embedding\n            \n            +\n            \n            -- 2. Tag embedding similarity component (30%)\n            -- Use the tag similarity scores calculated above\n            COALESCE((\n                SELECT tag_embedding_score \n                FROM tag_similarity_scores \n                WHERE user_id = u.id\n            ), 0.5) * 0.3 -- 30% weight for tag embeddings\n            \n            +\n            \n            -- 3. Tag overlap component (20%)\n            -- Lower = more overlap, we want the opposite\n            -- Count percentage of non-matching tags\n            (1 - COALESCE((\n                SELECT COUNT(*)::float \n                FROM UserTags ut\n                WHERE ut.user_id = u.id AND ut.tag_name IN (SELECT tag_name FROM user_tags)\n            ), 0) / \n            NULLIF((\n                SELECT COUNT(*)::float \n                FROM UserTags \n                WHERE user_id = u.id\n            ), 1)) * 0.2 -- 20% weight for tag name overlap\n        ) AS nemesis_score\n    FROM \n        Users u\n    WHERE \n        u.id != $1\n        AND u.id NOT IN (SELECT target_user_id FROM user_likes)\n        AND u.id NOT IN (SELECT target_user_id FROM user_dislikes)\n)\n\nSELECT \n    u.id, u.username, u.display_name, u.avatar_url as \"avatar_url: Url\", u.bio, u.created_at, u.updated_at, u.embedding as \"embedding: Vector\", \n    COALESCE(us.nemesis_score, 0.5) AS compatibility_score\nFROM \n    Users u\nLEFT JOIN \n    user_scores us ON u.id = us.id\nWHERE \n    u.id != $1\n    AND u.id NOT IN (SELECT target_user_id FROM user_likes)\n    AND u.id NOT IN (SELECT target_user_id FROM user_dislikes)\nORDER BY \n    -- Order by nemesis score (highest first = most incompatible)\n    compatibility_score DESC\nLIMIT $2\nOFFSET $3\n\n",
  "describe": {
    "columns": [
      {
        "ordinal": 0,
        "name": "id",
        "type_info": "Varchar"
      },
      {
        "ordinal": 1,
        "name": "username",
        "type_info": "Varchar"
      },
      {
        "ordinal": 2,
        "name": "display_name",
        "type_info": "Varchar"
      },
      {
        "ordinal": 3,
        "name": "avatar_url: Url",
        "type_info": "Varchar"
      },
      {
        "ordinal": 4,
        "name": "bio",
        "type_info": "Text"
      },
      {
        "ordinal": 5,
        "name": "created_at",
        "type_info": "Timestamptz"
      },
      {
        "ordinal": 6,
        "name": "updated_at",
        "type_info": "Timestamptz"
      },
      {
        "ordinal": 7,
        "name": "embedding: Vector",
        "type_info": {
          "Custom": {
            "name": "vector",
            "kind": "Simple"
          }
        }
      },
      {
        "ordinal": 8,
        "name": "compatibility_score",
        "type_info": "Float8"
      }
    ],
    "parameters": {
      "Left": [
        "Text",
        "Int8",
        "Int8",
        {
          "Custom": {
            "name": "vector",
            "kind": "Simple"
          }
        }
      ]
    },
    "nullable": [
      false,
      false,
      true,
      false,
      false,
      false,
      false,
      true,
      null
    ]
  },
  "hash": "7fe22395d950df57715351d71db78ef912cd839142ef4ba3f16b908d829c00dc"
}
